package edu.cuit.demo.dao;

import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;

public class Jdbc {

	// 注册驱动
	static {
		try {
			Class.forName("com.mysql.jdbc.Driver");
		} catch (ClassNotFoundException e) {
			e.printStackTrace();
		}
	}

	static final String url = "jdbc:mysql://localhost:3306/example";
	static final String user = "root";
	static final String password = "root";

	public static Connection getConnection() throws SQLException {
		// 也许, 我们需要让这个连接在线程内共享, 以实现事务........
		// 也许, 我们从连接池中获得连接, 而不是每次访问数据都重新建立连接, 这样好浪费资源....
		// ---------------------------------------------------------------------------
		Connection conn = DriverManager.getConnection(url, user, password);
		return conn;
	}
	
	public static void main(String[] args) throws SQLException {
		getConnection();
	}

	public static void closeAll(ResultSet rs, Statement stmt, Connection conn) {
		try {
			if (rs != null)
				rs.close();
		} catch (SQLException e) {
			e.printStackTrace();
		}
		try {
			if (stmt != null)
				stmt.close();
		} catch (SQLException e) {
			e.printStackTrace();
		}
		try {
			if (conn != null)
				conn.close();
		} catch (SQLException e) {
			e.printStackTrace();
		}
	}

	// get connection
	// create a statement select * from ... where col = ? and col2 = ?
	// executeupdate
	// close
	public static int executeUpdate(String sql, Object... parameters) {
		Connection conn = null;
		PreparedStatement stmt = null;
		try {
			conn = getConnection();
			stmt = conn.prepareStatement(sql);
			if (parameters != null && parameters.length > 0) {
				for (int i = 0; i < parameters.length; i++) {
					stmt.setObject((i + 1), parameters[i]);
				}
			}
			return stmt.executeUpdate();
		} catch (SQLException e) {
			throw new RuntimeException(e);
		} finally {
			closeAll(null, stmt, conn);
		}
	}

	// getconnection
	// create a statement
	// executeQuery
	// while(rs.next(){ ... }
	
	public static Object executeQuery(String sql, ResultSetHandler h, Object... parameters){
		Connection conn = null;
		PreparedStatement stmt = null;
		ResultSet rs = null;
		try {
			conn = getConnection();
			stmt = conn.prepareStatement(sql);
			if (parameters != null && parameters.length > 0) {
				for (int i = 0; i < parameters.length; i++) {
					stmt.setObject((i + 1), parameters[i]);
				}
			}
			rs = stmt.executeQuery();
			// 读取结果集的过程不确定
			Object obj = h.handle(rs); // obj 也许是个实体, 也许是个实体集合, 也许是个int, 也许是个 . . . 
			return obj;
		} catch (SQLException e) {
			throw new RuntimeException(e);
		} finally {
			closeAll(rs, stmt, conn);
		}
	}
	

}







